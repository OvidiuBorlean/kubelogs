#!/usr/bin/env bash
#test
nodeName=$1
#Check kubectl client exists
if ! command -v kubectl &> /dev/null
then
    printf "Kubectl client could not be found. Please install Kubectl client before running kubectl-exec.\nRefer to: https://kubernetes.io/docs/tasks/tools/\n\n"
    exit 1
fi

#Check client major/minor versions
kubectl_major_version=$(kubectl version --client -o yaml | grep -i "major" | awk '{ print $2 }' | sed 's/"//g')
kubectl_minor_version=$(kubectl version --client -o yaml | grep -i "minor" | awk '{ print $2 }' | sed 's/"//g')

if [[ $kubectl_major_version -gt 1 ]] || [[ $kubectl_major_version -eq 1 && $kubectl_minor_version -ge 18 ]]
then
        use_generator=false
        echo "Kuberetes client version is $kubectl_major_version.$kubectl_minor_version. Generator will not be used since it is deprecated."
elif [[ $kubectl_major_version -eq 1 && $kubectl_minor_version -lt 18 ]]
then
        use_generator=true
        echo "Kuberetes client version is $kubectl_major_version.$kubectl_minor_version. Generator will be used."
else
        echo "Invalid kubectl version, exiting."
        exit 1
fi
fqdn=$(kubectl cluster-info | grep -i -o -P '(?<=https://).*(?=:443)' | head -1)
echo $fqdn
cat << EOF > ./pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: $nodeName
  labels:
    role: myrole
spec:
  containers:
    - name: web
      image: nginx
      ports:
        - name: web
          containerPort: 8080
          protocol: TCP
EOF
kubectl create -f ./pod.yaml
